-------------------------------------------------
-- SQL file for creating and populating LOVELY LOCKS HAIRDRESSING SALON-
-- System Database.
-- Written By: Fadodun Oluwadamilola
-- March 2022
-------------------------------------------------- 


DROP TABLE APPOINTMENT_TR_STOCK;
DROP SEQUENCE PRODUCT_SEQ;
DROP TABLE STOCK;
DROP SEQUENCE APPOINTMENTS_SEQ;
DROP TABLE PRODUCT_QTY;
DROP SEQUENCE STOCK_SEQ;
DROP TABLE APPOINTMENTS;
DROP SEQUENCE CLIENTS_ID_SEQ;
DROP TABLE CLIENTS;
DROP SEQUENCE HAIRSTYLIST_SEQ;
DROP TABLE HAIRSTYLIST;

CREATE TABLE HAIRSTYLIST
(STAFF_ID NUMBER NOT NULL PRIMARY KEY,
STAFF_NIN VARCHAR2(8) NOT NULL,
STAFF_NAME VARCHAR2(25) NOT NULL,
STAFF_ADDRESS VARCHAR2(15) NOT NULL,
STAFF_DATE_OF_BIRTH DATE NOT NULL,
STAFF_TEL_NO VARCHAR2(11) NOT NULL);

CREATE SEQUENCE HAIRSTYLIST_SEQ
MINVALUE 900
START WITH 900
INCREMENT BY 1
CACHE 2;



CREATE TABLE CLIENTS
(CLIENT_ID NUMBER NOT NULL PRIMARY KEY,
CLIENT_NAME VARCHAR2(25) NOT NULL,
CLIENT_ADDRESS VARCHAR2(15) NOT NULL,
CLIENT_TEL_NO VARCHAR2(11) NOT NULL);

CREATE SEQUENCE CLIENTS_ID_SEQ
MINVALUE 601
START WITH 601
INCREMENT BY 1
CACHE 2;

CREATE TABLE APPOINTMENTS
(APP_NO NUMBER NOT NULL PRIMARY KEY,
APP_DATE DATE NOT NULL,
APP_TIME VARCHAR2(7) NOT NULL,
STAFF_ID NUMBER NOT NULL REFERENCES HAIRSTYLIST(STAFF_ID),
CLIENT_ID NUMBER NOT NULL REFERENCES CLIENTS(CLIENT_ID));

CREATE SEQUENCE APPOINTMENTS_SEQ
MINVALUE 1001
START WITH 1001
INCREMENT BY 1
CACHE 2;

CREATE TABLE PRODUCT_QTY
(STOCK_DESCRIPTION VARCHAR2(30) NOT NULL PRIMARY KEY,
TOTAL_QTY NUMBER NOT NULL);

CREATE SEQUENCE PRODUCT_SEQ
MINVALUE 3
MAXVALUE 100
START WITH 100
INCREMENT BY -1
CACHE 2;

CREATE TABLE STOCK
(STOCK_NO NUMBER NOT NULL PRIMARY KEY,
TREATMENT_DATE DATE NOT NULL,
STOCK_DESCRIPTION VARCHAR2(30) NOT NULL REFERENCES PRODUCT_QTY(STOCK_DESCRIPTION),
STOCK_QUANTITY NUMBER(1) NOT NULL);

CREATE SEQUENCE STOCK_SEQ
MINVALUE 75
START WITH 75
INCREMENT BY 1
CACHE 2;


CREATE TABLE APPOINTMENT_TR_STOCK
(APP_NO NUMBER NOT NULL REFERENCES APPOINTMENTS(APP_NO),
TREATMENT VARCHAR2(25) NOT NULL,
STOCK_NO NUMBER REFERENCES STOCK(STOCK_NO),
PRIMARY KEY(APP_NO, TREATMENT));


INSERT INTO HAIRSTYLIST
VALUES (HAIRSTYLIST_SEQ.NEXTVAL, 'TN112233', 'LISA COWELL', 'FELLING', '11-MAR-1988', '02090787881');

INSERT INTO HAIRSTYLIST
VALUES (HAIRSTYLIST_SEQ.NEXTVAL, 'SW123476', 'TOBY LINC', 'GOSFORTH', '12-NOV-1992', '07703678945');

INSERT INTO HAIRSTYLIST
VALUES (HAIRSTYLIST_SEQ.NEXTVAL, 'WU234576', 'MEGAN LOWL', 'PELAW', '18-JUN-1991', '07478908765');

INSERT INTO HAIRSTYLIST
VALUES (HAIRSTYLIST_SEQ.NEXTVAL, 'TU906541', 'ADE SMITH', 'SUNDERLAND', '19-OCT-1991', '07756980324');

INSERT INTO HAIRSTYLIST
VALUES (HAIRSTYLIST_SEQ.NEXTVAL, 'SW892360', 'LEE COOPER', 'SEAHAM', '21-AUG-1990', '07890899766');



INSERT INTO CLIENTS
VALUES (CLIENTS_ID_SEQ.nextval, 'JENNY LOWA', 'NEWCASTLE', '07912368990');

INSERT INTO CLIENTS
VALUES (CLIENTS_ID_SEQ.nextval, 'JAF STACEY', 'HEWORTH', '07965209835');

INSERT INTO CLIENTS 
VALUES (CLIENTS_ID_SEQ.nextval, 'TINA LIMA', 'SUNDERLAND', '07945908146');

INSERT INTO CLIENTS
VALUES (CLIENTS_ID_SEQ.nextval, 'GODWIN COOKE', 'SOUTH GOSFORTH', '07986540291');

INSERT INTO CLIENTS
VALUES (CLIENTS_ID_SEQ.nextval, 'TONY MARV', 'NEWCASTLE', '07945782011');

INSERT INTO CLIENTS
VALUES (CLIENTS_ID_SEQ.nextval, 'DARIA COOKE', 'SUNDERLAND', '07900234115');



INSERT INTO APPOINTMENTS
VALUES (APPOINTMENTS_SEQ.NEXTVAL, '1-FEB-2022', '9:00', 900, 601);

INSERT INTO APPOINTMENTS
VALUES (APPOINTMENTS_SEQ.NEXTVAL, '1-FEB-2022', '11:00', 901, 602);

INSERT INTO APPOINTMENTS
VALUES (APPOINTMENTS_SEQ.NEXTVAL, '2-FEB-2022', '9:00', 902, 603);

INSERT INTO APPOINTMENTS
VALUES (APPOINTMENTS_SEQ.NEXTVAL, '2-FEB-2022', '11:00', 903, 604);

INSERT INTO APPOINTMENTS
VALUES (APPOINTMENTS_SEQ.NEXTVAL, '3-FEB-2022', '10:00', 904, 605);

INSERT INTO APPOINTMENTS
VALUES (APPOINTMENTS_SEQ.NEXTVAL, '4-FEB-2022', '11:00', 903, 606);

INSERT INTO APPOINTMENTS
VALUES (APPOINTMENTS_SEQ.NEXTVAL, '4-FEB-2022', '13:00', 902, 602);



INSERT INTO PRODUCT_QTY
VALUES ('DARK AND LOVELY RELAXER', PRODUCT_SEQ.NEXTVAL);

INSERT INTO PRODUCT_QTY
VALUES ('REVLON HAIR DYE', PRODUCT_SEQ.NEXTVAL);

INSERT INTO PRODUCT_QTY
VALUES ('OLIVE OIL RELAXER', PRODUCT_SEQ.NEXTVAL);

INSERT INTO PRODUCT_QTY
VALUES ('STACEY WHITE COLOR HIGHLIGHTER', PRODUCT_SEQ.NEXTVAL);



INSERT INTO STOCK 
VALUES (STOCK_SEQ.NEXTVAL, '1-FEB-2022', 'DARK AND LOVELY RELAXER', 1);

INSERT INTO STOCK 
VALUES (STOCK_SEQ.NEXTVAL, '3-FEB-2022', 'REVLON HAIR DYE', 1);

INSERT INTO STOCK
VALUES (STOCK_SEQ.NEXTVAL, '3-FEB-2022', 'OLIVE OIL RELAXER', 1);

INSERT INTO STOCK
VALUES (STOCK_SEQ.NEXTVAL, '4-FEB-2022', 'STACEY WHITE COLOR HIGHLIGHTER', 1);

INSERT INTO STOCK
VALUES(STOCK_SEQ.NEXTVAL, '4-FEB-2022', 'DARK AND LOVELY RELAXER', 1)




INSERT INTO APPOINTMENT_TR_STOCK
VALUES (1001, 'DRY CUT', NULL);

INSERT INTO APPOINTMENT_TR_STOCK
VALUES (1002, 'DRY CUT', NULL);

INSERT INTO APPOINTMENT_TR_STOCK
VALUES (1002, 'PERMS', 75);

INSERT INTO APPOINTMENT_TR_STOCK
VALUES (1003, 'WASH AND BLOW DRY', NULL);

INSERT INTO APPOINTMENT_TR_STOCK
VALUES (1004, 'CUT AND BLOW DRY', NULL);

INSERT INTO APPOINTMENT_TR_STOCK
VALUES (1004, 'FULL COLOUR', 76);

INSERT INTO APPOINTMENT_TR_STOCK
VALUES (1005, 'PERMS', 77);

INSERT INTO APPOINTMENT_TR_STOCK
VALUES (1006, 'HIGHLIGHT COLOUR', 78);

INSERT INTO APPOINTMENT_TR_STOCK
VALUES (1006, 'SPECIAL OCCASION', NULL);

INSERT INTO APPOINTMENT_TR_STOCK
VALUES (1007, 'PERMS', 79);

INSERT INTO APPOINTMENT_TR_STOCK
VALUES (1007, 'DRY CUT', NULL);

------------------------------
SQL QUERY CODES
------------------------------
SELECT * 
FROM HAIRSTYLIST;

SELECT * 
FROM CLIENTS;

SELECT * 
FROM APPOINTMENTS;

SELECT * 
FROM STOCK;

SELECT * 
FROM PRODUCT_QTY;

SELECT * 
FROM APPOINTMENT_TR_STOCK;

SELECT * 
FROM APPOINTMENTS
WHERE CLIENT_ID = 601;

SELECT * 
FROM APPOINTMENTS
WHERE APP_NO = 1007;


SELECT *
FROM APPOINTMENT_TR_STOCK
WHERE TREATMENT = 'DRY CUT';

SELECT *
FROM CLIENTS
WHERE CLIENT_ADDRESS = 'NEWCASTLE'
OR CLIENT_ADDRESS = 'SUNDERLAND'
OR CLIENT_ADDRESS = 'FELLING';


SELECT APP_NO, CLIENT_ID, STAFF_ID, APP_DATE
FROM APPOINTMENTS
WHERE APP_DATE > SYSDATE;


SELECT APP_NO, CLIENT_ID, STAFF_ID, APP_DATE
FROM APPOINTMENTS
WHERE APP_DATE <= SYSDATE;

SELECT CLIENT_ID, CLIENT_NAME, CLIENT_ADDRESS  
FROM CLIENTS
ORDER BY CLIENT_ADDRESS desc;


SELECT STAFF_ID, STAFF_NAME, STAFF_ADDRESS  
FROM HAIRSTYLIST
ORDER BY STAFF_ADDRESS ASC;


SELECT A.APP_NO, A.STAFF_ID, A.CLIENT_ID, ATS.TREATMENT, ATS.STOCK_NO 
FROM APPOINTMENTS A, APPOINTMENT_TR_STOCK ATS 
WHERE A.APP_NO = ATS.APP_NO;

SELECT H.STAFF_NAME NAMES
FROM HAIRSTYLIST H
UNION
SELECT C.CLIENT_NAME
FROM CLIENTS C;

SELECT  S.STOCK_NO, S.TREATMENT_DATE, S.STOCK_DESCRIPTION, P.TOTAL_QTY
FROM STOCK S, PRODUCT_QTY P 
WHERE S.STOCK_DESCRIPTION = P.STOCK_DESCRIPTION;

------------------------------
PL/SQL CODE BLOCKS
------------------------------
A.


CREATE  OR  REPLACE  PROCEDURE  print_APPOINTMENT_DETAILS (my_CLIENT_ID 
APPOINTMENTS.CLIENT_ID%TYPE) AS 
CURSOR CLIENT_CURSOR( CLIENTID IN APPOINTMENTS.CLIENT_ID%TYPE) IS
  SELECT APP_TIME, APP_DATE, STAFF_ID, CLIENT_ID
  FROM APPOINTMENTS 
  WHERE CLIENT_ID = CLIENTID;
  MY_APPOINTMENTS APPOINTMENTS%ROWTYPE;
BEGIN
    OPEN CLIENT_CURSOR(my_CLIENT_ID);
    LOOP
    FETCH CLIENT_CURSOR INTO MY_APPOINTMENTS.APP_TIME, MY_APPOINTMENTS.APP_DATE, 
    MY_APPOINTMENTS.STAFF_ID, MY_APPOINTMENTS.CLIENT_ID;
    EXIT WHEN CLIENT_CURSOR%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('CLIENT ' ||MY_APPOINTMENTS.CLIENT_ID|| ' was attended to by '||' Staff ' ||MY_APPOINTMENTS.STAFF_ID||' on '||MY_APPOINTMENTS.APP_DATE|| ' by ' ||MY_APPOINTMENTS.APP_TIME); 
    END LOOP;
    DBMS_OUTPUT.PUT_LINE(CLIENT_CURSOR%ROWCOUNT || ' rows received');
    CLOSE CLIENT_CURSOR;
END;
/

 DECLARE 
  my_CLIENT_ID APPOINTMENTS.CLIENT_ID%TYPE;
  BEGIN
  my_CLIENT_ID := :ENTER_CLIENT_ID;
  IF my_CLIENT_ID IS NULL THEN
  DBMS_OUTPUT.PUT_LINE('Please enter a value for Client ID'); 
  ELSE
  print_APPOINTMENT_DETAILS(my_CLIENT_ID);
  END IF;
  END;
  /



-----------------------------

B.
CREATE  OR  REPLACE  PROCEDURE  RETURN_APPOINTMENT (my_CLIENT_ID 
APPOINTMENTS.CLIENT_ID%TYPE) AS 
    CURSOR APP_CURSOR(CLIENTID IN APPOINTMENTS.CLIENT_ID%TYPE) IS
    SELECT A.APP_TIME, A.APP_DATE, A.STAFF_ID, A.CLIENT_ID, A.APP_NO, ATS.TREATMENT
    FROM APPOINTMENTS A, APPOINTMENT_TR_STOCK ATS
    WHERE A.APP_NO = ATS.APP_NO
    AND CLIENT_ID = CLIENTID;
    my_appointment APPOINTMENTS%ROWTYPE;
    my_treatment_stock APPOINTMENT_TR_STOCK%ROWTYPE;
BEGIN
    OPEN APP_CURSOR(my_CLIENT_ID);
    LOOP
    FETCH APP_CURSOR INTO my_appointment.APP_TIME, my_appointment.APP_DATE,
    my_appointment.STAFF_ID, my_appointment.CLIENT_ID, my_appointment.APP_NO,
    my_treatment_stock.TREATMENT;
    EXIT WHEN APP_CURSOR%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('CLIENT ' ||my_appointment.CLIENT_ID|| ' with appointment number '
    ||my_appointment.APP_NO|| ' was attended to by '||' Staff ' ||my_appointment.STAFF_ID||', and had treatment '
    ||my_treatment_stock.TREATMENT|| ' on '||my_appointment.APP_DATE|| ' by ' ||my_appointment.APP_TIME); 
    END LOOP;
    DBMS_OUTPUT.PUT_LINE(APP_CURSOR%ROWCOUNT || ' rows received');
    CLOSE APP_CURSOR;
END;
/

DECLARE
    my_CLIENT_ID APPOINTMENTS.CLIENT_ID%TYPE;
BEGIN
    my_CLIENT_ID := :ENTER_A_CLIENT_ID;
    IF my_CLIENT_ID IS NULL THEN 
        DBMS_OUTPUT.PUT_LINE('No client number was entered');
    ELSE
        RETURN_APPOINTMENT(my_CLIENT_ID);
    END IF;
END;
/

---------------------------------------------
C1.
---Appointment trigger before appoinment transaction to insert
CREATE OR REPLACE TRIGGER APPOINMENT_INSERT
BEFORE INSERT ON APPOINTMENTS
FOR EACH ROW
BEGIN
    IF :NEW.APP_DATE < SYSDATE THEN
    :NEW.APP_DATE := SYSDATE+2; 
    END IF;
    DBMS_OUTPUT.PUT_LINE('ROW TRIGGER CHECKED');
END;
/
---Stored procedure for apoinmnet booking
CREATE  OR  REPLACE  PROCEDURE  BOOKAPPOINTMENT 
(my_CLIENT_ID APPOINTMENTS.CLIENT_ID%TYPE,
APPOINTMENT_DATE APPOINTMENTS.APP_DATE%TYPE,
APPOINTMENT_TIME APPOINTMENTS.APP_TIME%TYPE,
DESIRED_TREATMENT APPOINTMENT_TR_STOCK.TREATMENT%TYPE,
DESIRED_PRODUCT1 STOCK.STOCK_DESCRIPTION%TYPE,
DESIRED_PRODUCT2 STOCK.STOCK_DESCRIPTION%TYPE,
DESIRED_PRODUCT3 STOCK.STOCK_DESCRIPTION%TYPE) AS 
BEGIN 
  
  INSERT INTO APPOINTMENTS VALUES(APPOINTMENTS_SEQ.NEXTVAL, APPOINTMENT_DATE, APPOINTMENT_TIME, 902, MY_CLIENT_ID);
  INSERT INTO APPOINTMENT_TR_STOCK VALUES (1008, DESIRED_TREATMENT, NULL); 


  DBMS_OUTPUT.PUT_LINE('INSERTED');
END;
/
---anonymous block for appoinmnet booking
DECLARE

my_CLIENT_ID APPOINTMENTS.CLIENT_ID%TYPE;
APPOINTMENT_DATE APPOINTMENTS.APP_DATE%TYPE;
APPOINTMENT_TIME APPOINTMENTS.APP_TIME%TYPE;
DESIRED_TREATMENT APPOINTMENT_TR_STOCK.TREATMENT%TYPE;
DESIRED_PRODUCT1 STOCK.STOCK_DESCRIPTION%TYPE;
DESIRED_PRODUCT2 STOCK.STOCK_DESCRIPTION%TYPE;
DESIRED_PRODUCT3 STOCK.STOCK_DESCRIPTION%TYPE;
BEGIN
    MY_CLIENT_ID := :YOUR_CUSTOMER_NO;
    APPOINTMENT_DATE := :APPOINTMENT_DATE;
    APPOINTMENT_TIME := :APPOINTMENT_TIME;
    DESIRED_TREATMENT := :WHAT_TREATMENT;
IF MY_CLIENT_ID IS NULL OR APPOINTMENT_DATE IS NULL OR APPOINTMENT_TIME IS NULL OR DESIRED_TREATMENT IS NULL THEN
    DBMS_OUTPUT.PUT_LINE('ALL REQUIRED DATA NOT ENTERED ');
ELSE 
  BOOKAPPOINTMENT( MY_CLIENT_ID, APPOINTMENT_DATE, APPOINTMENT_TIME, DESIRED_TREATMENT, DESIRED_PRODUCT1, DESIRED_PRODUCT2, DESIRED_PRODUCT3);
END IF;
END;


-----------------------------------------------------
C2. ---(IN TWO PARTS BECAUSE DIALOG BOX IN ORACLE ONLY TAKES 4-5 BIND VARIABLES AT ONCE)
---Appointment trigger before products gets inserted into table
CREATE OR REPLACE TRIGGER PRODUCT_INSERT
BEFORE INSERT ON STOCK
FOR EACH ROW
BEGIN
    IF :NEW.TREATMENT_DATE < SYSDATE THEN
    :NEW.TREATMENT_DATE := SYSDATE+2; 
    END IF;
    DBMS_OUTPUT.PUT_LINE('ROW TRIGGER CHECKED');
END;
/


CREATE  OR  REPLACE  PROCEDURE  INSERTPRODUCT 
(my_CLIENT_ID APPOINTMENTS.CLIENT_ID%TYPE,
APPOINTMENT_DATE APPOINTMENTS.APP_DATE%TYPE,
APPOINTMENT_TIME APPOINTMENTS.APP_TIME%TYPE,
DESIRED_TREATMENT APPOINTMENT_TR_STOCK.TREATMENT%TYPE,
DESIRED_PRODUCT1 STOCK.STOCK_DESCRIPTION%TYPE,
DESIRED_PRODUCT2 STOCK.STOCK_DESCRIPTION%TYPE,
DESIRED_PRODUCT3 STOCK.STOCK_DESCRIPTION%TYPE,
TRT_DATE STOCK.TREATMENT_DATE%TYPE) AS 

BEGIN 
  
INSERT INTO STOCK VALUES(STOCK_SEQ.nextval, TRT_DATE, DESIRED_PRODUCT1, 1);
INSERT INTO STOCK VALUES(STOCK_SEQ.nextval, TRT_DATE, DESIRED_PRODUCT2, 1);
INSERT INTO STOCK VALUES(STOCK_SEQ.nextval, TRT_DATE, DESIRED_PRODUCT3, 1);

  DBMS_OUTPUT.PUT_LINE('INSERTED');
END;
/

DECLARE

my_CLIENT_ID APPOINTMENTS.CLIENT_ID%TYPE;
APPOINTMENT_DATE APPOINTMENTS.APP_DATE%TYPE;
APPOINTMENT_TIME APPOINTMENTS.APP_TIME%TYPE;
DESIRED_TREATMENT APPOINTMENT_TR_STOCK.TREATMENT%TYPE;
DESIRED_PRODUCT1 STOCK.STOCK_DESCRIPTION%TYPE;
DESIRED_PRODUCT2 STOCK.STOCK_DESCRIPTION%TYPE;
DESIRED_PRODUCT3 STOCK.STOCK_DESCRIPTION%TYPE;
TRT_DATE STOCK.TREATMENT_DATE%TYPE;
BEGIN
    DESIRED_PRODUCT1 := :ENTER_1ST_PRODUCT;
    DESIRED_PRODUCT2 := :ENTER_2ND_PRODUCT;
    DESIRED_PRODUCT3 := :ENTER_3RD_PRODUCT;
    TRT_DATE := :ENTER_TREATMENT_DATE;
IF DESIRED_PRODUCT1 IS NULL OR 
    DESIRED_PRODUCT2 IS NULL OR DESIRED_PRODUCT3 IS NULL 
    OR TRT_DATE IS NULL THEN
    DBMS_OUTPUT.PUT_LINE('ALL REQUIRED DATA NOT ENTERED ');
ELSE 
  INSERTPRODUCT( MY_CLIENT_ID, APPOINTMENT_DATE, APPOINTMENT_TIME, DESIRED_TREATMENT, DESIRED_PRODUCT1, DESIRED_PRODUCT2, DESIRED_PRODUCT3, TRT_DATE);
END IF;
END;

